using Telegram.Bot.Exceptions;
using Telegram.Bot.Requests;
using Telegram.Bot.Requests.Abstractions;

namespace Telegram.Bot;

#pragma warning disable CS8604

public partial class WTelegramBotClient : ITelegramBotClient
{
	///<inheritdoc/>
	public async Task<TResponse> SendRequest<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken)
	{
		return (TResponse)(object)(request switch
		{
			GetUpdatesRequest r => await GetUpdates(r.Offset, r.Limit, r.Timeout, r.AllowedUpdates, cancellationToken),
			SetWebhookRequest r => await SetWebhook(r.Url, r.Certificate, r.IpAddress, r.MaxConnections, r.AllowedUpdates, r.DropPendingUpdates, r.SecretToken, cancellationToken).ReturnTrue(),
			DeleteWebhookRequest r => await DeleteWebhook(r.DropPendingUpdates, cancellationToken).ReturnTrue(),
			GetWebhookInfoRequest => await GetWebhookInfo(cancellationToken),
			GetMeRequest => await GetMe(cancellationToken),
			LogOutRequest => await LogOut(cancellationToken).ReturnTrue(),
			CloseRequest => await Close(cancellationToken).ReturnTrue(),
			SendMessageRequest r => await SendMessage(r.ChatId, r.Text, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.LinkPreviewOptions, r.MessageThreadId, r.Entities, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			ForwardMessageRequest r => await ForwardMessage(r.ChatId, r.FromChatId, r.MessageId, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.VideoStartTimestamp, cancellationToken),
			ForwardMessagesRequest r => await ForwardMessages(r.ChatId, r.FromChatId, r.MessageIds, r.MessageThreadId, r.DisableNotification, r.ProtectContent, cancellationToken),
			CopyMessageRequest r => await CopyMessage(r.ChatId, r.FromChatId, r.MessageId, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.MessageThreadId, r.CaptionEntities, r.ShowCaptionAboveMedia, r.DisableNotification, r.ProtectContent, r.AllowPaidBroadcast, r.VideoStartTimestamp, cancellationToken),
			CopyMessagesRequest r => await CopyMessages(r.ChatId, r.FromChatId, r.MessageIds, r.RemoveCaption, r.MessageThreadId, r.DisableNotification, r.ProtectContent, cancellationToken),
			SendPhotoRequest r => await SendPhoto(r.ChatId, r.Photo, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.MessageThreadId, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendAudioRequest r => await SendAudio(r.ChatId, r.Audio, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Duration, r.Performer, r.Title, r.Thumbnail, r.MessageThreadId, r.CaptionEntities, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendDocumentRequest r => await SendDocument(r.ChatId, r.Document, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Thumbnail, r.MessageThreadId, r.CaptionEntities, r.DisableContentTypeDetection, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendVideoRequest r => await SendVideo(r.ChatId, r.Video, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Duration, r.Width, r.Height, r.Thumbnail, r.MessageThreadId, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.SupportsStreaming, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, r.Cover, r.StartTimestamp, cancellationToken),
			SendAnimationRequest r => await SendAnimation(r.ChatId, r.Animation, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Duration, r.Width, r.Height, r.Thumbnail, r.MessageThreadId, r.CaptionEntities, r.ShowCaptionAboveMedia, r.HasSpoiler, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendVoiceRequest r => await SendVoice(r.ChatId, r.Voice, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Duration, r.MessageThreadId, r.CaptionEntities, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendVideoNoteRequest r => await SendVideoNote(r.ChatId, r.VideoNote, r.ReplyParameters, r.ReplyMarkup, r.Duration, r.Length, r.Thumbnail, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendPaidMediaRequest r => await SendPaidMedia(r.ChatId, r.StarCount, r.Media, r.Caption, r.ParseMode, r.ReplyParameters, r.ReplyMarkup, r.Payload, r.CaptionEntities, r.ShowCaptionAboveMedia, r.DisableNotification, r.ProtectContent, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendMediaGroupRequest r => await SendMediaGroup(r.ChatId, r.Media, r.ReplyParameters, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendLocationRequest r => await SendLocation(r.ChatId, r.Latitude, r.Longitude, r.ReplyParameters, r.ReplyMarkup, r.HorizontalAccuracy, r.LivePeriod, r.Heading, r.ProximityAlertRadius, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendVenueRequest r => await SendVenue(r.ChatId, r.Latitude, r.Longitude, r.Title, r.Address, r.ReplyParameters, r.ReplyMarkup, r.FoursquareId, r.FoursquareType, r.GooglePlaceId, r.GooglePlaceType, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendContactRequest r => await SendContact(r.ChatId, r.PhoneNumber, r.FirstName, r.LastName, r.Vcard, r.ReplyParameters, r.ReplyMarkup, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendPollRequest r => await SendPoll(r.ChatId, r.Question, r.Options, r.IsAnonymous ?? true, r.Type, r.AllowsMultipleAnswers, r.CorrectOptionId, r.ReplyParameters, r.ReplyMarkup, r.Explanation, r.ExplanationParseMode, r.ExplanationEntities, r.QuestionParseMode, r.QuestionEntities, r.OpenPeriod, r.CloseDate, r.IsClosed, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendDiceRequest r => await SendDice(r.ChatId, r.Emoji, r.ReplyParameters, r.ReplyMarkup, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SendChatActionRequest r => await SendChatAction(r.ChatId, r.Action, r.MessageThreadId, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			SetMessageReactionRequest r => await SetMessageReaction(r.ChatId, r.MessageId, r.Reaction, r.IsBig, cancellationToken).ReturnTrue(),
			GetUserProfilePhotosRequest r => await GetUserProfilePhotos(r.UserId, r.Offset, r.Limit, cancellationToken),
			SetUserEmojiStatusRequest r => await SetUserEmojiStatus(r.UserId, r.EmojiStatusCustomEmojiId, r.EmojiStatusExpirationDate, cancellationToken).ReturnTrue(),
			GetFileRequest r => await GetFile(r.FileId, cancellationToken),
			BanChatMemberRequest r => await BanChatMember(r.ChatId, r.UserId, r.UntilDate, r.RevokeMessages, cancellationToken).ReturnTrue(),
			UnbanChatMemberRequest r => await UnbanChatMember(r.ChatId, r.UserId, r.OnlyIfBanned, cancellationToken).ReturnTrue(),
			RestrictChatMemberRequest r => await RestrictChatMember(r.ChatId, r.UserId, r.Permissions, r.UseIndependentChatPermissions, r.UntilDate, cancellationToken).ReturnTrue(),
			PromoteChatMemberRequest r => await PromoteChatMember(r.ChatId, r.UserId, r.IsAnonymous, r.CanManageChat, r.CanPostMessages, r.CanEditMessages, r.CanDeleteMessages, r.CanPostStories, r.CanEditStories, r.CanDeleteStories, r.CanManageVideoChats, r.CanRestrictMembers, r.CanPromoteMembers, r.CanChangeInfo, r.CanInviteUsers, r.CanPinMessages, r.CanManageTopics, cancellationToken).ReturnTrue(),
			SetChatAdministratorCustomTitleRequest r => await SetChatAdministratorCustomTitle(r.ChatId, r.UserId, r.CustomTitle, cancellationToken).ReturnTrue(),
			BanChatSenderChatRequest r => await BanChatSenderChat(r.ChatId, r.SenderChatId, cancellationToken).ReturnTrue(),
			UnbanChatSenderChatRequest r => await UnbanChatSenderChat(r.ChatId, r.SenderChatId, cancellationToken).ReturnTrue(),
			SetChatPermissionsRequest r => await SetChatPermissions(r.ChatId, r.Permissions, r.UseIndependentChatPermissions, cancellationToken).ReturnTrue(),
			ExportChatInviteLinkRequest r => await ExportChatInviteLink(r.ChatId, cancellationToken),
			CreateChatInviteLinkRequest r => await CreateChatInviteLink(r.ChatId, r.Name, r.ExpireDate, r.MemberLimit, r.CreatesJoinRequest, cancellationToken),
			EditChatInviteLinkRequest r => await EditChatInviteLink(r.ChatId, r.InviteLink, r.Name, r.ExpireDate, r.MemberLimit, r.CreatesJoinRequest, cancellationToken),
			CreateChatSubscriptionInviteLinkRequest r => await CreateChatSubscriptionInviteLink(r.ChatId, r.SubscriptionPeriod, r.SubscriptionPrice, r.Name, cancellationToken),
			EditChatSubscriptionInviteLinkRequest r => await EditChatSubscriptionInviteLink(r.ChatId, r.InviteLink, r.Name, cancellationToken),
			RevokeChatInviteLinkRequest r => await RevokeChatInviteLink(r.ChatId, r.InviteLink, cancellationToken),
			ApproveChatJoinRequestRequest r => await ApproveChatJoinRequest(r.ChatId, r.UserId, cancellationToken),
			DeclineChatJoinRequestRequest r => await DeclineChatJoinRequest(r.ChatId, r.UserId, cancellationToken),
			SetChatPhotoRequest r => await SetChatPhoto(r.ChatId, r.Photo, cancellationToken).ReturnTrue(),
			DeleteChatPhotoRequest r => await DeleteChatPhoto(r.ChatId, cancellationToken).ReturnTrue(),
			SetChatTitleRequest r => await SetChatTitle(r.ChatId, r.Title, cancellationToken).ReturnTrue(),
			SetChatDescriptionRequest r => await SetChatDescription(r.ChatId, r.Description, cancellationToken).ReturnTrue(),
			PinChatMessageRequest r => await PinChatMessage(r.ChatId, r.MessageId, r.DisableNotification, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			UnpinChatMessageRequest r => await UnpinChatMessage(r.ChatId, r.MessageId, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			UnpinAllChatMessagesRequest r => await UnpinAllChatMessages(r.ChatId, cancellationToken).ReturnTrue(),
			LeaveChatRequest r => await LeaveChat(r.ChatId, cancellationToken).ReturnTrue(),
			GetChatRequest r => await GetChat(r.ChatId, cancellationToken),
			GetChatAdministratorsRequest r => await GetChatAdministrators(r.ChatId, cancellationToken),
			GetChatMemberCountRequest r => await GetChatMemberCount(r.ChatId, cancellationToken),
			GetChatMemberRequest r => await GetChatMember(r.ChatId, r.UserId, cancellationToken),
			SetChatStickerSetRequest r => await SetChatStickerSet(r.ChatId, r.StickerSetName, cancellationToken).ReturnTrue(),
			DeleteChatStickerSetRequest r => await DeleteChatStickerSet(r.ChatId, cancellationToken).ReturnTrue(),
			GetForumTopicIconStickersRequest => await GetForumTopicIconStickers(cancellationToken),
			CreateForumTopicRequest r => await CreateForumTopic(r.ChatId, r.Name, r.IconColor, r.IconCustomEmojiId, cancellationToken),
			EditForumTopicRequest r => await EditForumTopic(r.ChatId, r.MessageThreadId, r.Name, r.IconCustomEmojiId, cancellationToken).ReturnTrue(),
			CloseForumTopicRequest r => await CloseForumTopic(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			ReopenForumTopicRequest r => await ReopenForumTopic(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			DeleteForumTopicRequest r => await DeleteForumTopic(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			UnpinAllForumTopicMessagesRequest r => await UnpinAllForumTopicMessages(r.ChatId, r.MessageThreadId, cancellationToken).ReturnTrue(),
			EditGeneralForumTopicRequest r => await EditGeneralForumTopic(r.ChatId, r.Name, cancellationToken).ReturnTrue(),
			CloseGeneralForumTopicRequest r => await CloseGeneralForumTopic(r.ChatId, cancellationToken).ReturnTrue(),
			ReopenGeneralForumTopicRequest r => await ReopenGeneralForumTopic(r.ChatId, cancellationToken).ReturnTrue(),
			HideGeneralForumTopicRequest r => await HideGeneralForumTopic(r.ChatId, cancellationToken).ReturnTrue(),
			UnhideGeneralForumTopicRequest r => await UnhideGeneralForumTopic(r.ChatId, cancellationToken).ReturnTrue(),
			UnpinAllGeneralForumTopicMessagesRequest r => await UnpinAllGeneralForumTopicMessages(r.ChatId, cancellationToken).ReturnTrue(),
			AnswerCallbackQueryRequest r => await AnswerCallbackQuery(r.CallbackQueryId, r.Text, r.ShowAlert, r.Url, r.CacheTime, cancellationToken).ReturnTrue(),
			GetUserChatBoostsRequest r => await GetUserChatBoosts(r.ChatId, r.UserId, cancellationToken),
			GetBusinessConnectionRequest r => await GetBusinessConnection(r.BusinessConnectionId, cancellationToken),
			SetMyCommandsRequest r => await SetMyCommands(r.Commands, r.Scope, r.LanguageCode, cancellationToken).ReturnTrue(),
			DeleteMyCommandsRequest r => await DeleteMyCommands(r.Scope, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyCommandsRequest r => await GetMyCommands(r.Scope, r.LanguageCode, cancellationToken),
			SetMyNameRequest r => await SetMyName(r.Name, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyNameRequest r => await GetMyName(r.LanguageCode, cancellationToken),
			SetMyDescriptionRequest r => await SetMyDescription(r.Description, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyDescriptionRequest r => await GetMyDescription(r.LanguageCode, cancellationToken),
			SetMyShortDescriptionRequest r => await SetMyShortDescription(r.ShortDescription, r.LanguageCode, cancellationToken).ReturnTrue(),
			GetMyShortDescriptionRequest r => await GetMyShortDescription(r.LanguageCode, cancellationToken),
			SetChatMenuButtonRequest r => await SetChatMenuButton(r.ChatId, r.MenuButton, cancellationToken).ReturnTrue(),
			GetChatMenuButtonRequest r => await GetChatMenuButton(r.ChatId, cancellationToken),
			SetMyDefaultAdministratorRightsRequest r => await SetMyDefaultAdministratorRights(r.Rights, r.ForChannels, cancellationToken).ReturnTrue(),
			GetMyDefaultAdministratorRightsRequest r => await GetMyDefaultAdministratorRights(r.ForChannels, cancellationToken),
			EditMessageTextRequest r => await EditMessageText(r.ChatId, r.MessageId, r.Text, r.ParseMode, r.Entities, r.LinkPreviewOptions, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageTextRequest r => await EditMessageText(r.InlineMessageId, r.Text, r.ParseMode, r.Entities, r.LinkPreviewOptions, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageCaptionRequest r => await EditMessageCaption(r.ChatId, r.MessageId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageCaptionRequest r => await EditMessageCaption(r.InlineMessageId, r.Caption, r.ParseMode, r.CaptionEntities, r.ShowCaptionAboveMedia, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageMediaRequest r => await EditMessageMedia(r.ChatId, r.MessageId, r.Media, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageMediaRequest r => await EditMessageMedia(r.InlineMessageId, r.Media, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageLiveLocationRequest r => await EditMessageLiveLocation(r.ChatId, r.MessageId, r.Latitude, r.Longitude, r.LivePeriod, r.HorizontalAccuracy, r.Heading, r.ProximityAlertRadius, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageLiveLocationRequest r => await EditMessageLiveLocation(r.InlineMessageId, r.Latitude, r.Longitude, r.LivePeriod, r.HorizontalAccuracy, r.Heading, r.ProximityAlertRadius, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			StopMessageLiveLocationRequest r => await StopMessageLiveLocation(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			StopInlineMessageLiveLocationRequest r => await StopMessageLiveLocation(r.InlineMessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			EditMessageReplyMarkupRequest r => await EditMessageReplyMarkup(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			EditInlineMessageReplyMarkupRequest r => await EditMessageReplyMarkup(r.InlineMessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken).ReturnTrue(),
			StopPollRequest r => await StopPoll(r.ChatId, r.MessageId, r.ReplyMarkup, r.BusinessConnectionId, cancellationToken),
			DeleteMessageRequest r => await DeleteMessage(r.ChatId, r.MessageId, cancellationToken).ReturnTrue(),
			DeleteMessagesRequest r => await DeleteMessages(r.ChatId, r.MessageIds, cancellationToken).ReturnTrue(),
			SendStickerRequest r => await SendSticker(r.ChatId, r.Sticker, r.ReplyParameters, r.ReplyMarkup, r.Emoji, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			GetStickerSetRequest r => await GetStickerSet(r.Name, cancellationToken),
			GetCustomEmojiStickersRequest r => await GetCustomEmojiStickers(r.CustomEmojiIds, cancellationToken),
			UploadStickerFileRequest r => await UploadStickerFile(r.UserId, r.Sticker, r.StickerFormat, cancellationToken),
			CreateNewStickerSetRequest r => await CreateNewStickerSet(r.UserId, r.Name, r.Title, r.Stickers, r.StickerType, r.NeedsRepainting, cancellationToken).ReturnTrue(),
			AddStickerToSetRequest r => await AddStickerToSet(r.UserId, r.Name, r.Sticker, cancellationToken).ReturnTrue(),
			SetStickerPositionInSetRequest r => await SetStickerPositionInSet(r.Sticker, r.Position, cancellationToken).ReturnTrue(),
			DeleteStickerFromSetRequest r => await DeleteStickerFromSet(r.Sticker, cancellationToken).ReturnTrue(),
			ReplaceStickerInSetRequest r => await ReplaceStickerInSet(r.UserId, r.Name, r.OldSticker, r.Sticker, cancellationToken).ReturnTrue(),
			SetStickerEmojiListRequest r => await SetStickerEmojiList(r.Sticker, r.EmojiList, cancellationToken).ReturnTrue(),
			SetStickerKeywordsRequest r => await SetStickerKeywords(r.Sticker, r.Keywords, cancellationToken).ReturnTrue(),
			SetStickerMaskPositionRequest r => await SetStickerMaskPosition(r.Sticker, r.MaskPosition, cancellationToken).ReturnTrue(),
			SetStickerSetTitleRequest r => await SetStickerSetTitle(r.Name, r.Title, cancellationToken).ReturnTrue(),
			SetStickerSetThumbnailRequest r => await SetStickerSetThumbnail(r.Name, r.UserId, r.Format, r.Thumbnail, cancellationToken).ReturnTrue(),
			SetCustomEmojiStickerSetThumbnailRequest r => await SetCustomEmojiStickerSetThumbnail(r.Name, r.CustomEmojiId, cancellationToken).ReturnTrue(),
			DeleteStickerSetRequest r => await DeleteStickerSet(r.Name, cancellationToken).ReturnTrue(),
			GetAvailableGiftsRequest => await GetAvailableGifts(cancellationToken),
			SendGiftRequest r => await SendGift(r.ChatId ?? r.UserId, r.GiftId, r.Text, r.TextParseMode, r.TextEntities, r.PayForUpgrade, cancellationToken).ReturnTrue(),
			VerifyUserRequest r => await VerifyUser(r.UserId, r.CustomDescription, cancellationToken).ReturnTrue(),
			VerifyChatRequest r => await VerifyChat(r.ChatId, r.CustomDescription, cancellationToken).ReturnTrue(),
			RemoveUserVerificationRequest r => await RemoveUserVerification(r.UserId, cancellationToken).ReturnTrue(),
			RemoveChatVerificationRequest r => await RemoveChatVerification(r.ChatId, cancellationToken).ReturnTrue(),
			AnswerInlineQueryRequest r => await AnswerInlineQuery(r.InlineQueryId, r.Results, r.CacheTime, r.IsPersonal, r.NextOffset, r.Button, cancellationToken).ReturnTrue(),
			AnswerWebAppQueryRequest r => await AnswerWebAppQuery(r.WebAppQueryId, r.Result, cancellationToken),
			SavePreparedInlineMessageRequest r => await SavePreparedInlineMessage(r.UserId, r.Result, r.AllowUserChats, r.AllowBotChats, r.AllowGroupChats, r.AllowChannelChats, cancellationToken),
			SendInvoiceRequest r => await SendInvoice(r.ChatId, r.Title, r.Description, r.Payload, r.Currency, r.Prices, r.ProviderToken, r.ProviderData, r.MaxTipAmount, r.SuggestedTipAmounts, r.PhotoUrl, r.PhotoSize, r.PhotoWidth, r.PhotoHeight, r.NeedName, r.NeedPhoneNumber, r.NeedEmail, r.NeedShippingAddress, r.SendPhoneNumberToProvider, r.SendEmailToProvider, r.IsFlexible, r.ReplyParameters, r.ReplyMarkup, r.StartParameter, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.AllowPaidBroadcast, cancellationToken),
			CreateInvoiceLinkRequest r => await CreateInvoiceLink(r.Title, r.Description, r.Payload, r.Currency, r.Prices, r.ProviderToken, r.ProviderData, r.MaxTipAmount, r.SuggestedTipAmounts, r.PhotoUrl, r.PhotoSize, r.PhotoWidth, r.PhotoHeight, r.NeedName, r.NeedPhoneNumber, r.NeedEmail, r.NeedShippingAddress, r.SendPhoneNumberToProvider, r.SendEmailToProvider, r.IsFlexible, r.SubscriptionPeriod, r.BusinessConnectionId, cancellationToken),
			AnswerShippingQueryRequest r => await AnswerShippingQuery(r.ShippingQueryId, r.ShippingOptions, r.ErrorMessage, cancellationToken).ReturnTrue(),
			AnswerPreCheckoutQueryRequest r => await AnswerPreCheckoutQuery(r.PreCheckoutQueryId, r.ErrorMessage, cancellationToken).ReturnTrue(),
			GetStarTransactionsRequest r => await GetStarTransactions(r.Offset, r.Limit, cancellationToken),
			RefundStarPaymentRequest r => await RefundStarPayment(r.UserId, r.TelegramPaymentChargeId, cancellationToken).ReturnTrue(),
			EditUserStarSubscriptionRequest r => await EditUserStarSubscription(r.UserId, r.TelegramPaymentChargeId, r.IsCanceled, cancellationToken).ReturnTrue(),
			SetPassportDataErrorsRequest r => await SetPassportDataErrors(r.UserId, r.Errors, cancellationToken).ReturnTrue(),
			SendGameRequest r => await SendGame(r.ChatId, r.GameShortName, r.ReplyParameters, r.ReplyMarkup, r.MessageThreadId, r.DisableNotification, r.ProtectContent, r.MessageEffectId, r.BusinessConnectionId, r.AllowPaidBroadcast, cancellationToken),
			SetGameScoreRequest r => await SetGameScore(r.UserId, r.Score, r.ChatId, r.MessageId, r.Force, r.DisableEditMessage, cancellationToken),
			SetInlineGameScoreRequest r => await SetGameScore(r.UserId, r.Score, r.InlineMessageId, r.Force, r.DisableEditMessage, cancellationToken).ReturnTrue(),
			GetGameHighScoresRequest r => await GetGameHighScores(r.UserId, r.ChatId, r.MessageId, cancellationToken),
			GetInlineGameHighScoresRequest r => await GetGameHighScores(r.UserId, r.InlineMessageId, cancellationToken),
			_ => throw new ApiRequestException("Not found", 404)
		});
	}
}